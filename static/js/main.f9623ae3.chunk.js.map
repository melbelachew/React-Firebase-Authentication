{"version":3,"sources":["config/Fire.js","Home.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","logout","bind","assertThisInitialized","auth","signOut","react_default","a","createElement","onClick","Component","Login","login","handleChange","signup","state","email","passpword","e","setState","defineProperty","target","name","value","preventDefault","signInWithEmailAndPassword","password","then","u","catch","error","console","log","createUserWithEmailAndPassword","className","class","for","onChange","type","id","aria-describedby","placeholder","style","marginLeft","App","user","authListner","_this2","onAuthStateChanged","localStorage","setItem","uid","removeItem","src_Home","src_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9623ae3.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\n  const config = {\n    apiKey: \"AIzaSyBVXKDhOxUkn3LwQhro3Ps8KTlDavsPta0\",\n    authDomain: \"react-firebase-authentic-e384c.firebaseapp.com\",\n    databaseURL: \"https://react-firebase-authentic-e384c.firebaseio.com\",\n    projectId: \"react-firebase-authentic-e384c\",\n    storageBucket: \"react-firebase-authentic-e384c.appspot.com\",\n    messagingSenderId: \"828980760631\"\n  };\n  const fire = firebase.initializeApp(config);\n  export default fire;","import React, { Component } from 'react';\nimport fire from './config/Fire';\n\n\nclass Home extends Component {\n    constructor(props){\n        super(props);\n        this.logout = this.logout.bind(this)\n    }\n\n    logout(){\n        fire.auth().signOut();\n    }\n\nrender() {\n    return (\n        <div>\n        <h1> Welcome </h1>\n        <button onClick ={this.logout}>Logout</button>\n        </div>\n    );\n}\n}\nexport default Home;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport fire from './config/Fire';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.login = this.login.bind(this);\n        this.handleChange=this.handleChange.bind(this)\n        this.signup = this.signup.bind(this);\n        this.state = {\n            email:'',\n            passpword:''\n        };\n}\n\nhandleChange(e) {\n    this.setState({ [e.target.name]: e.target.value});\n}\n\nlogin(e){\n    e.preventDefault();\n    fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n        \n    }).catch((error)=>{\n        console.log(error)\n    });\n}\n\nsignup(e){\n    e.preventDefault();\n    fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n    }).then((u)=>{console.log(u)})\n    .catch((error)=>{\n        console.log(error);\n    })\n}\n\nrender() {\n    return( <div className=\"col-md-6\">\n    <form>\n  <div class=\"form-group\">\n    <label for=\"exampleInputEmail1\">Email address</label>\n    <input name=\"email\" value={this.state.email} onChange={this.handleChange} type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\"/>\n    <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"exampleInputPassword1\">Password</label>\n    <input name=\"password\" value={this.state.password} onChange={this.handleChange} type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\"/>\n  </div>\n  <button type=\"submit\" onClick={this.login} class=\"btn btn-primary\">Login</button>\n  <button onClick={this.signup} style={{marginLeft: '25px'}} className=\"btn btn-success\">Signup</button>\n</form>\n</div>\n);\n\n}\n}\nexport default Login;","import React, { Component } from 'react';\nimport fire from './config/Fire';\nimport Home from './Home';\nimport Login from './Login';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = ({\n      user:{}\n    });\n    this.authListner = this.authListner.bind(this);\n  }\n  componentDidMount(){\n    this.authListner();\n  }\n  authListner() {\n    fire.auth().onAuthStateChanged((user) => {\n     console.log(user);\n      if (user){\n        this.setState({user});\n        localStorage.setItem('user', user.uid);\n      } else {\n        this.setState({ user: null });\n        localStorage.removeItem('user');\n      }\n      });\n  }\n  render() {\n    return (\n      <div>\n       {this.state.user ? (<Home/>) : (<Login/>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}